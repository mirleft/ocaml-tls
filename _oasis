OASISFormat: 0.4
Name:        tls
Version:     0.7.1
Synopsis:    TLS support for OCaml
Authors:     Hannes Mehnert <hannes@mehnert.org>, David Kaloper <david@numm.org>
Maintainers: David Kaloper <david@numm.org>, Hannes Mehnert <hannes@mehnert.org>
Homepage:    https://github.com/mirleft/ocaml-tls
License:     BSD-2-clause
Plugins:     META (0.4)
BuildTools:  ocamlbuild
Description:
  TLS support on top of OCaml


Flag "lwt"
  Description : Lwt_unix backend
  Default     : true

Flag "mirage"
  Description : Mirage backend
  Default     : true

Library "tls"
  Path            : lib/
  Modules         : Tracing, Ciphersuite, Packet, Core,
                    Reader, Writer, Config,
                    Engine
  InternalModules : Control, Crypto, Utils,
                    State, Handshake_common, Handshake_crypto,
                    Handshake_server, Handshake_client
  Pack            : true
  BuildDepends    : cstruct, cstruct.ppx, ppx_sexp_conv, result, nocrypto, x509
  XMETARequires   : cstruct, sexplib, result, nocrypto, x509
#, bisect

Library "tests"
  Path            : tests/
  Modules         : Testlib, Readertests, Writertests, Readerwritertests, Unittests
  Install         : false
  Build          $: flag(tests)
  BuildDepends    : tls, oUnit, cstruct.unix

Library "tls-lwt"
  Build          $: flag(lwt)
  FindlibName     : lwt
  FindlibParent   : tls
  Path            : lwt
  Modules         : Tls_lwt, X509_lwt
  BuildDepends    : x509, tls, lwt.unix, cstruct.lwt, nocrypto.lwt, ptime
  XMETARequires   : x509, tls, lwt, lwt.unix, cstruct.lwt, nocrypto.lwt, ptime

Library "tls-mirage"
  Build          $: flag(mirage)
  FindlibName     : mirage
  FindlibParent   : tls
  Path            : mirage
  Modules         : Tls_mirage
  BuildDepends    : x509, tls, mirage-types, ipaddr, lwt, ptime
  XMETARequires   : x509, tls, mirage-types, ipaddr, lwt, ptime

Executable "test_runner"
  Build          $: flag(tests)
  Path            : tests/
  Install         : false
  CompiledObject  : native
  MainIs          : unittestrunner.ml
  BuildDepends    : tls, tests

Test it
  Command         : $test_runner -runner sequential
  Run            $: flag(tests)
#  PostCommand     : (cd _build; bisect-report -html ../coverage `find ../ -name 'bisect*.out'` ; find ../ -name 'bisect*.out' -delete)

# Random examples.

Executable "feedback"
  Build          $: flag(tests)
  Path            : tests/
  Install         : false
  CompiledObject  : native
  MainIs          : feedback.ml
  BuildDepends    : tests, cstruct.unix

Executable "starttls_server"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : starttls_server.ml
  BuildDepends    : tls.lwt, str

Executable "echo_server"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : echo_server.ml
  BuildDepends    : tls.lwt

Executable "echo_server_sni"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : echo_server_sni.ml
  BuildDepends    : tls.lwt

Executable "echo_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : echo_client.ml
  BuildDepends    : tls.lwt

Executable "http_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : http_client.ml
  BuildDepends    : tls.lwt

Executable "test_server"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : test_server.ml
  BuildDepends    : tls.lwt

Executable "test_client"
  Build          $: flag(lwt) && flag(tests)
  Path            : lwt/examples/
  Install         : false
  CompiledObject  : native
  MainIs          : test_client.ml
  BuildDepends    : tls.lwt

Document api
  Title: Documentation and API reference
  Abstract: TLS implements transport layer security in OCaml. It consists
            of a pure core (Engine), and several effectful frontends (tls-lwt,
            tls-mirage). Application developers who want to use TLS in OCaml
            should read the frontend documentation, frontend developers the
            core documentation.
  Type: ocamlbuild (0.3)
  BuildTools+: ocamldoc
  XOcamlbuildPath: doc
  XOcamlbuildModules: lib/Engine, lib/Config, lib/Packet, lib/Ciphersuite, lib/Core,
                      lwt/Tls_lwt, lwt/X509_lwt,
                      mirage/Tls_mirage
  Install: false
